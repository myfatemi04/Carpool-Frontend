import * as immutable from 'immutable';
import { ReactNode, useCallback, useMemo, useState } from 'react';
import { createContext } from 'react';
import { getGroup as fetchGroup } from '../components/api';

export class GroupState extends immutable.Record({
	id: 0,
	name: '',
	memberIds: immutable.Set<number>(),
	joinCode: null as string | null,
}) {
	setJoinCode(joinCode: string) {
		return this.set('joinCode', joinCode);
	}
	setName(name: string) {
		return this.set('name', name);
	}
	addMember(memberId: number) {
		return this.set('memberIds', this.memberIds.add(memberId));
	}
	removeMember(memberId: number) {
		return this.set('memberIds', this.memberIds.remove(memberId));
	}
	setMemberIds(memberIds: immutable.Set<number>) {
		return this.set('memberIds', memberIds);
	}
}

function u(name: string) {
	return () => {
		throw new Error(`${name} is not implemented`);
	};
}

type GroupContextProps = {
	groups: immutable.Map<number, GroupState>;
	addGroup: (group: GroupState) => void;
	getGroup: (id: number) => Promise<GroupState | null>;
	renameGroup: (groupId: number, name: string) => void;
	generateJoinCode: (groupId: number) => void;
};

// A React context that provides access to the current user's groups.
export const GroupsContext = createContext<GroupContextProps>({
	groups: immutable.Map<number, GroupState>(),
	addGroup: u('addGroup'),
	getGroup: u('getGroup'),
	renameGroup: u('renameGroup'),
	generateJoinCode: u('generateJoinCode'),
});

export default function GroupsProvider({ children }: { children: ReactNode }) {
	// usestates for all the properties in GroupsContext
	const [groups, setGroups] = useState(immutable.Map<number, GroupState>());

	const addGroup = useCallback((group: GroupState) => {
		setGroups((groups) => groups.set(group.id, group));
	}, []);

	const renameGroup = useCallback((groupId: number, name: string) => {
		setGroups((groups) => groups.setIn([groupId, 'name'], name));
	}, []);

	const generateJoinCode = useCallback((groupId: number) => {
		// TODO actually use the API here, this was generated by copilot
		setGroups((groups) =>
			groups.setIn(
				[groupId, 'joinCode'],
				Math.random().toString(36).substr(2, 5)
			)
		);
	}, []);

	const getGroup = useCallback(
		async (id: number) => {
			const group = groups.get(id);
			if (group) {
				return group;
			} else {
				const group = await fetchGroup(id);
				const state = new GroupState({
					id: group.id,
					name: group.name,
				});
				addGroup(state);
				return state;
			}
		},
		[addGroup, groups]
	);

	const value: GroupContextProps = useMemo(() => {
		return {
			groups,
			addGroup,
			getGroup,
			renameGroup,
			generateJoinCode,
		};
	}, [addGroup, generateJoinCode, getGroup, groups, renameGroup]);

	return (
		<GroupsContext.Provider value={value}>{children}</GroupsContext.Provider>
	);
}
